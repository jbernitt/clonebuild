<ui:composition xmlns="http://www.w3.org/1999/xhtml" xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core"
    xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:p="http://primefaces.org/ui" template="/WEB-INF/template.xhtml">

    <ui:define name="head">
        <style type="text/css">
            .docs h1 {
                margin-top: 30px;
            }

            .docs p,
            .docs li {
                line-height: 1.5;
            }

            .docs pre {
                font-family: monospace;
                background-color: #293034;
                color: #ffffff;
                padding: 1em;
                font-size: 14px;
                border-radius: 3px;
                overflow: auto;
            }
        </style>
        <h:outputScript name="jquery/jquery.js" library="primefaces" />
        <h:outputStylesheet name="components.css" library="primefaces" />
    </ui:define>

    <ui:define name="content">
        <div class="ui-g">
            <div class="ui-g-12">
                <div class="card docs">
                    <h1>Overview</h1>
                    <p>PrimeFaces Designer API is SASS based theme engine for creating PrimeFaces themes easily.</p>

                    <h1>SASS Installation</h1>
                    <p>Designer requires SASS to be installed at the command line, refer to the <a href="https://sass-lang.com/install">SASS documentation</a> for installing instructions.</p>

                    <h1>Designer Application</h1>
                    <p>This demo application featuring various components is created to test your components while designing your theme. It is a maven application with a built-in jetty server
                        so to run the application locally, extract the contents of the designer zip file and run the following command.</p>
<pre>
mvn clean jetty:run
</pre>
                    <p>Then navigate to http://localhost:8080/designer to access the application in your local environment, now it is time to create your own theme.</p>

                    <h1>Create Your Own Theme</h1>
                    <p>A built-in base theme named "primefaces-mytheme" is available to get started with your own theme using 500+ variables. To begin with
                        navigate to the src/main/webapp/resources/primefaces-mytheme folder that includes the following artifacts;
                    </p>

                    <ul>
                        <li>/fonts: Folder of the font files</li>
                        <li>_fonts.scss: Definition of the @font-face of the theme</li>
                        <li>_variables.scss: List of variables to create your own theme</li>
                        <li>_extensions.scss: Customizations to the theme</li>
                        <li>theme.scss: Main theme file that imports the scss files required for the theme</li>
                    </ul>

                    <p>A theme.css file needs to be generated whenever a file imported by the theme.scss is changed, this is done by the following SASS command.</p>
<pre>
sass --update src/main/webapp/resources/
</pre>

                    <p>Watch mode is handy so that sass listens to your changes and generates the css automatically.</p>
<pre>
sass -w src/main/webapp/resources/
</pre>

                    <p>You may now start designing your own theme by changing the variables such as $primaryColor, once the theme.css file is generated,
                        use the components menu at the sidebar to view your theme.</p>

                    <h1>Video Tutorial</h1>
                    <p>A video tutorial is available to demonstrate how a theme can be created with the capabilities of the Designer API.</p>
                    <iframe width="560" height="315" src="https://www.youtube.com/embed/juP3xkE8mvI" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen="allowfullscreen"></iframe>

                    <h1>Customization</h1>
                    <p>Designer API is located inside the resources/designer folder and an actual theme imports _fonts, _extensions, _variables and the main _core.scss from the designer folder.
                        In case you need to make structural changes to the design system, add these changes to the _extensions.scss files instead of editing the .scss files inside the designer folder to
                        avoid any maintenance issues. Designer is updated periodically for improvements and updating is done by replacing the designer folder only. For seamless updates, never edit
                        the designer folder as _extensions.scss file is created for this purpose.
                    </p>

                    <h1>Font Family</h1>
                    <p>Default font of the designer is "Open Sans" and it can be changed in three steps.</p>
                    <ul>
                        <li>Placing the font artifacts such as eot, woff files inside the fonts.</li>
                        <li>Define the font-face and import the font files using the JSF resource el expression.</li>
                        <li>Change the $fontFamily at _variables.scss.</li>
                    </ul>

                    <p>Following example uses Roboto font for the theme.</p>

                    <i>_fonts.scss</i>
<pre>
/* roboto-300 - latin */
@font-face {
font-family: 'Roboto';
font-style: normal;
font-weight: 300;
src: url("\#{resource['primefaces-mytheme:fonts/roboto-v15-latin-300.eot']}"); /* IE9 Compat Modes */
src: local('Roboto Light'), local('Roboto-Light'),
    url("\#{resource['primefaces-mytheme:fonts/roboto-v15-latin-300.eot']}#iefix") format('embedded-opentype'), /* IE6-IE8 */
    url("\#{resource['primefaces-mytheme:fonts/roboto-v15-latin-300.woff2']}") format('woff2'), /* Super Modern Browsers */
    url("\#{resource['primefaces-mytheme:fonts/roboto-v15-latin-300.woff']}") format('woff'), /* Modern Browsers */
    url("\#{resource['primefaces-mytheme:fonts/roboto-v15-latin-300.ttf']}") format('truetype'), /* Safari, Android, iOS */
    url("\#{resource['primefaces-mytheme:fonts/roboto-v15-latin-300.svg']}#Roboto") format('svg'); /* Legacy iOS */
}

/* roboto-regular - latin */
@font-face {
font-family: 'Roboto';
font-style: normal;
font-weight: 400;
src: url("\#{resource['primefaces-mytheme:fonts/roboto-v15-latin-regular.eot']}"); /* IE9 Compat Modes */
src: local('Roboto'), local('Roboto-Regular'),
    url("\#{resource['primefaces-mytheme:fonts/roboto-v15-latin-regular.eot']}#iefix") format('embedded-opentype'), /* IE6-IE8 */
    url("\#{resource['primefaces-mytheme:fonts/roboto-v15-latin-regular.woff2']}") format('woff2'), /* Super Modern Browsers */
    url("\#{resource['primefaces-mytheme:fonts/roboto-v15-latin-regular.woff']}") format('woff'), /* Modern Browsers */
    url("\#{resource['primefaces-mytheme:fonts/roboto-v15-latin-regular.ttf']}") format('truetype'), /* Safari, Android, iOS */
    url("\#{resource['primefaces-mytheme:fonts/roboto-v15-latin-regular.svg']}#Roboto") format('svg'); /* Legacy iOS */
}

/* roboto-700 - latin */
@font-face {
font-family: 'Roboto';
font-style: normal;
font-weight: 700;
src: url("\#{resource['primefaces-mytheme:fonts/roboto-v15-latin-700.eot']}"); /* IE9 Compat Modes */
src: local('Roboto Bold'), local('Roboto-Bold'),
    url("\#{resource['primefaces-mytheme:fonts/roboto-v15-latin-700.eot']}#iefix") format('embedded-opentype'), /* IE6-IE8 */
    url("\#{resource['primefaces-mytheme:fonts/roboto-v15-latin-700.woff2']}") format('woff2'), /* Super Modern Browsers */
    url("\#{resource['primefaces-mytheme:fonts/roboto-v15-latin-700.woff']}") format('woff'), /* Modern Browsers */
    url("\#{resource['primefaces-mytheme:fonts/roboto-v15-latin-700.ttf']}") format('truetype'), /* Safari, Android, iOS */
    url("\#{resource['primefaces-mytheme:fonts/roboto-v15-latin-700.svg']}#Roboto") format('svg'); /* Legacy iOS */
}
</pre>

                <i>_variables.scss</i>
<pre>
$fontFamily:"Roboto","Helvetica Neue",sans-serif;
</pre>

                <h1>Theme Size</h1>
                <p>Component sizes including the font-sizes, margins and paddings are defined using em units which allows changing the overall size, as a result changing the $fontSize variable
                    is enough to scale the components. Default is 14px and example below creates a bigger theme based on a scale of 16px.</p>
<pre>
$fontSize:16px;
</pre>
                <h1>Build</h1>
                <p>Once the theme is ready for use, run the following maven command to generate a jar file to use in your actual application.</p>
<pre>
mvn clean install -P build
</pre>
                <p>This command generates a file called primefaces-mytheme-{version}.jar under the target folder. You may now use this theme by including the jar file to the classpath of your application and configure it as
                    your theme of choice with a context parameter.</p>
<pre>
&lt;context-param&gt;
    &lt;param-name>primefaces.THEME&lt;/param-name&gt;
    &lt;param-value>mytheme&lt;/param-value&gt;
&lt;/context-param&gt;
</pre>

                </div>
            </div>
        </div>
    </ui:define>

</ui:composition>
